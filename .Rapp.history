tx = get_taxonomy()
tx
tx = get_taxonomy()
tx
tx$root_taxon
get_group <- function(group_id) {#
	if(missing(group_id)){#
		stop("You must provide a group id.")#
	}#
	if(group_id=="all") {#
		url = url_generator(type="groups")#
	}#
	else {#
		url = url_generator(type="groups",id=group_id)#
		}#
	return(APIObject(url))	#
}
g=get_group()
packagesVersion("jsonlite")
packageVersion("jsonlite")
packageVersion("httr")
packageVersion("rjsonio")
library(omadb)
protein=get_protein("YEAST69")
protein=get_protein("YEAST90")
protein$sequence
?get_protein
library(biocLite)
library(bioclite)
biocLite("roma")
library("biocLite")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(roma)
biocLite("roma")
R CMD build omadb
install.packagesd("Biocheck")
install.packages("BioBheck")
library(httr)
library(plyr)
url
url = http://omadev.cs.ucl.ac.uk/api/pairs/YEAST/ASHGO/
url = "http://omadev.cs.ucl.ac.uk/api/pairs/YEAST/ASHGO/"
response = httr::GET(url)#
	content_list = httr::content(response, as = "parsed")#
	column_names = names(content_list)
dfs <- lapply(content_list, data.frame, stringsAsFactors = FALSE)
head(dfs)
final = rbind.fill(dfs)
head(final)
content_list
content_list[1]
dfs <- lapply(content_list, data.frame, stringsAsFactors = FALSE)
dfs[1]
depth(content_list)
depth <- function(list) ifelse(is.list(list), 1L + max(sapply(list, depth)), 0L)
depth(content_list)
dfe = dfs[[1]]
dfe[[1]]
lista = content_list[[1]]
lista
rbind(lista)
lista
lista[[1]]
lista[1]
depth(lista[1])
depth(lista[1][1])
lista[1][1]
lista[[1]][[1]
]
depth(lista[[1]][[1]])
depth(lista[[1]][[5]])
lista[[1]][[4]]
lista[[1]][[7]]
depth(lista[[1]][[7]])
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){#
	 			resolveNesting()#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}#
#
resolveNesting <- function (data) {#
	for(i in 1:length(data)){#
		for(j in 1:length(data[i])){#
			if(depth(data[i][j]==1)){#
				data[i][j]=plyr::rbind(data[i][j])#
			}#
		}		#
	}#
}
f = formatData(content_list)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){#
	 			resolveNesting(data)#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
f = formatData(content_list)
resolveNesting <- function (data) {#
	for(i in 1:length(data)){#
		for(j in 1:length(data[i])){#
			if(depth(data[[i]][[j]]==1)){#
				data[[i]][[j]]=plyr::rbind(data[[i]][[j]])#
			}#
		}		#
	}#
}
f = formatData(content_list)
resolveNesting <- function (data) {#
	for(i in 1:length(data)){#
		for(j in 1:length(data[i])){#
			if(depth(data[[i]][[j]])==1){#
				data[[i]][[j]]=plyr::rbind(data[[i]][[j]])#
			}#
		}		#
	}#
}
f = formatData(content_list)
head(df)
head(f)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #
	 			for(i in 1:length(data)){#
	 				resolveNesting(data)		#
	 			}#
	 		formatData(data)#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}#
#
 resolveNesting <- function (data) {#
 	for(i in 1:length(data)){#
 		for(j in 1:length(data[i])){#
 			for(k in 1:length(data[i][j])){#
 				if(depth(data[[i]][[j]][[k]])==1){#
 				data[[i]][[j]][[k]]=plyr::rbind(data[[i]][[j]][[k]])#
 			}#
 		}		#
 	}#
 	}#
}
f = formatData(content_list)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #
	 			for(i in 1:length(data)){#
	 				resolveNesting(data)		#
	 			}#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}#
#
 resolveNesting <- function (data) {#
 	for(i in 1:length(data)){#
 		for(j in 1:length(data[i])){#
 			for(k in 1:length(data[i][j])){#
 				if(depth(data[[i]][[j]][[k]])==1){#
 				data[[i]][[j]][[k]]=plyr::rbind(data[[i]][[j]][[k]])#
 			}#
 		}		#
 	}#
 	}#
}
f = formatData(content_list)
head(f)
depth(lista[[1]][[7]])
lista[[1]][[7]]
rbind(lista[[1]][[7]])
lista[[1]][[7]]=rbind(lista[[1]][[7]])
lista[[1]][[7]]
length(lista)
length(lista[[1]][[7]])
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
f = formatData(content_list)
head(f)
libary(reshape1)
libary(reshape2)
library(reshape2)
cancer_data = read.table("full_cancer_out")
head(cancer_data)
md <- melt(cancer_data, id.vars = c("specimen_id"))
md
head(md)
head(cancer_our)
head(cancer_out)
head(cancer_data)
libary(reshape)
library(reshape)
md <- melt(cancer_data, id= c("specimen_id"))
md <- melt(cancer_data, id= c("specimen_id","gene_name"))
head(md)
mydata = cast(md,value~gene_name)
head(mydata)
mydata = cast(md,value~gene_name+specimen_id)
head(mydata)
mydata = cast(md,specimen_id+value~gene_name)
head(mydata)
mydata = cast(md,gene_name~value)
head(mydata)
mydata = cast(md,gene_name~value+specimen_id)
head(mydata)
mydata = cast(md,value+specimen_id~gene_name)
head(mydata)
md <- melt(cancer_data, id= c("specimen_id","value"))
head(md)
mydata = cast(md,value+specimen_id~gene_name)
md <- melt(cancer_data, id= c("specimen_id"))
md <- melt(cancer_data, id= c("specimen_id","gene_name"))
head(md)
library(reshape2)
md <- melt(cancer_data)
head(md)
length(mydata)
head(f)
mydata = read.table("cancer_out")
mydata
mydata
mydata = read.table("full_cancer_out")
mydata
cor(mydata)
cormat <- round(cor(mydata),2)
head(cormat)
library(reshape2)
melted_cormat <- melt(cormat)
melted_cormat
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + #
  geom_tile()
ggplot(data = melted_cormat, aes(x=X1, y=X2, fill=value)) + #
  geom_tile()
# Get lower triangle of the correlation matrix#
  get_lower_tri<-function(cormat){#
    cormat[upper.tri(cormat)] <- NA#
    return(cormat)#
  }#
  # Get upper triangle of the correlation matrix#
  get_upper_tri <- function(cormat){#
    cormat[lower.tri(cormat)]<- NA#
    return(cormat)#
  }
upper_tri <- get_upper_tri(cormat)#
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
ggplot(data = melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
ggplot(data = melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
reorder_cormat <- function(cormat){#
# Use correlation between variables as distance#
dd <- as.dist((1-cormat)/2)#
hc <- hclust(dd)#
cormat <-cormat[hc$order, hc$order]#
}
cormat <- reorder_cormat(cormat)#
upper_tri <- get_upper_tri(cormat)#
# Melt the correlation matrix#
melted_cormat <- melt(upper_tri, na.rm = TRUE)#
# Create a ggheatmap#
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
    name="Pearson\nCorrelation") +#
  theme_minimal()+ # minimal theme#
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()#
# Print the heatmap#
print(ggheatmap)
cormat <- reorder_cormat(cormat)#
upper_tri <- get_upper_tri(cormat)#
# Melt the correlation matrix#
melted_cormat <- melt(upper_tri, na.rm = TRUE)#
# Create a ggheatmap#
ggheatmap <- ggplot(melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
    name="Pearson\nCorrelation") +#
  theme_minimal()+ # minimal theme#
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()#
# Print the heatmap#
print(ggheatmap)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
ggplot(data = melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
ggplot(data = melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
melted_cormat <- melt(upper_tri, na.rm = TRUE)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
ggplot(data = melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
cormat <- round(cor(mydata),2)
melted_cormat <- melt(cormat)
get_lower_tri<-function(cormat){#
    cormat[upper.tri(cormat)] <- NA#
    return(cormat)#
  }#
  # Get upper triangle of the correlation matrix#
  get_upper_tri <- function(cormat){#
    cormat[lower.tri(cormat)]<- NA#
    return(cormat)#
  }
upper_tri <- get_upper_tri(cormat)#
upper_tri
library(reshape2)#
melted_cormat <- melt(upper_tri, na.rm = TRUE)#
# Heatmap#
library(ggplot2)#
ggplot(data = melted_cormat, aes(X2, X1, fill = value))+#
 geom_tile(color = "white")+#
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", #
   midpoint = 0, limit = c(-1,1), space = "Lab", #
   name="Pearson\nCorrelation") +#
  theme_minimal()+ #
 theme(axis.text.x = element_text(angle = 45, vjust = 1, #
    size = 12, hjust = 1))+#
 coord_fixed()
library(httr)
resp = GET("https://omadev.cs.ucl.ac.uk/api/sequence/?query=MNDPSLLGYPNVGPQQQQQQQQQQHAGLLGKGTPNALQQQLHMNQLTGIPPPGLMNNSDVHTSSNNNSRQLLDQLAN")
resp
response = resp
content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
objectFactory <- function(column_names,content_list,type) { #
#
	list_of_variables = list()#
	for(name in column_names){#
 		list_of_variables[[name]] = content_list[[name]]#
 	}#
#
 	value <- list_of_variables#
 	attr(value, "class") <- "apiobject"#
 	value#
#
}
objectFactory(column_names,content_list)
obj = objectFactory(column_names,content_list)
obj$targets
formatData <- function (data,url==NULL) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
formatData <- function (data,url==NULL) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
df = formatData(obj$targets)
df = formatData(formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}obj$targets)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
df = formatData(obj$targets)
df = formatData(obj$targets)
}
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
#
	 		}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
df = formatData(obj$targets)
depth <- function(list) ifelse(is.list(list), 1L + max(sapply(list, depth)), 0L)
df = formatData(obj$targets)
df
biocLite(topGO)
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
library(topGO)
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
str(head(geneID2GO))
GO2geneID <- inverseList(geneID2GO)
str(head(GO2geneID))
head(geneID2GO)
class(geneID2GO)$`068724`
class(geneID2GO)$068724
class(geneID2GO$`068724`)
typeof(geneID2GO)
sampleGOdata
data(gpdata.gs)
browseVigenttes("roma")
browseVigenettes("roma")
browseVignettes("roma")
browseVignettes(roma)
biocLite(ggtree)
biocLite("ggtree")
nwk="((sba:0.03984952076326608861,(sca:0.24212307199678842484,(cgl:0.29957965624763355228,(((kla:0.32829009627835226137,ago:0.35217085340006204497):0.05741546733669361524,(skl:0.15813405639248145906,kwa:0.25658337062111585825):0.04348414441988464330):0.03689776646512240438,(yli:1.00856143917930674014,(((lel:0.28806785996189482324,(cal:0.11643570498932501178,ctr:0.12746420698315982789):0.08774131940069260227):0.12449843844102517765,pst:0.20187483296288805112):0.04951181210826986756,(pgu:0.32083506939774530942,dha:0.19121342958249643029):0.04448806563879210280):0.37619889625745939199):0.45090563411571948915):0.08921537612721808230):0.03625000527459597971):0.17548658899657892940):0.01414267170946369515,((sce:0.02228625922028022385,spa:0.01687593406907536564):0.01282179619059338992,smi:0.03661027033511007195):0.01331228080676675335,sku:0.04268512407808848497):0.0;"
phylip <- ggtree::read.phylip(nwk)
phylip <- read.phylip(nwk)
install.packages("api")
install.packages("ape")
library(ape)
my.phylo <- read.tree("((sba:0.03984952076326608861,(sca:0.24212307199678842484,(cgl:0.29957965624763355228,(((kla:0.32829009627835226137,ago:0.35217085340006204497):0.05741546733669361524,(skl:0.15813405639248145906,kwa:0.25658337062111585825):0.04348414441988464330):0.03689776646512240438,(yli:1.00856143917930674014,(((lel:0.28806785996189482324,(cal:0.11643570498932501178,ctr:0.12746420698315982789):0.08774131940069260227):0.12449843844102517765,pst:0.20187483296288805112):0.04951181210826986756,(pgu:0.32083506939774530942,dha:0.19121342958249643029):0.04448806563879210280):0.37619889625745939199):0.45090563411571948915):0.08921537612721808230):0.03625000527459597971):0.17548658899657892940):0.01414267170946369515,((sce:0.02228625922028022385,spa:0.01687593406907536564):0.01282179619059338992,smi:0.03661027033511007195):0.01331228080676675335,sku:0.04268512407808848497):0.0;")
my.phylo <- read.tree("newick.txt")
my.phylo <- read.tree("newick.txt")
write.tree(my.phylo)
my.phylo
ggtree(my.phylo)
library(ggtree)
ggtree(my.phylo)
nwk = "((sba:0.03984952076326608861,(sca:0.24212307199678842484,(cgl:0.29957965624763355228,(((kla:0.32829009627835226137,ago:0.35217085340006204497):0.05741546733669361524,(skl:0.15813405639248145906,kwa:0.25658337062111585825):0.04348414441988464330):0.03689776646512240438,(yli:1.00856143917930674014,(((lel:0.28806785996189482324,(cal:0.11643570498932501178,ctr:0.12746420698315982789):0.08774131940069260227):0.12449843844102517765,pst:0.20187483296288805112):0.04951181210826986756,(pgu:0.32083506939774530942,dha:0.19121342958249643029):0.04448806563879210280):0.37619889625745939199):0.45090563411571948915):0.08921537612721808230):0.03625000527459597971):0.17548658899657892940):0.01414267170946369515,((sce:0.02228625922028022385,spa:0.01687593406907536564):0.01282179619059338992,smi:0.03661027033511007195):0.01331228080676675335,sku:0.04268512407808848497):0.0;"
my.phylo <- read.tree(nwk)
biocLite("geneplast")
library(geneplast)
data(gpdata.gs)
library(ggtree)
library(devtools)
library(roxygen2)
library(roxygen)
install.packages("roxygen2")
library(roxygen2)
setwd("desktop")
setwd("./roma")
document()
document()
install.packages("testhat")
setwd("..")
devtools:install("roma")
devtools::install("roma")
devtools:uninstall("roma")
devtools::uninstall("roma")
devtools::install("roma")
library(roma)
?getTopGO
?formatTopGO
?getTree
?getTr
devtools::uninstall("roma")
setwd("./roma")
roxygen2::document()
library(roxygen2)
document()
