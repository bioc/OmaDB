getGRanges(mems$members)
apply(mems$members['locus.strand'], 1, function(x) substring(as.character(x),0,1) )
df['locus.strand'] = apply(df['locus.strand'], 1, function(x) {#
		if(length(as.character(x))=2){#
			(substring(as.character(x),0,1)#
		}#
		else{#
			x = "+"#
		}#
		} #
		)
df['locus.strand'] = apply(df['locus.strand'], 1, function(x) {#
		if(length(as.character(x))=2){#
			x = substring(as.character(x),0,1)#
		}#
		else{#
			x = "+"#
		}#
		} #
		)
df['locus.strand'] = apply(df['locus.strand'], 1, function(x) if(x=="1"){x=="+"})
df['locus.strand']
df = mems$members
df['locus.strand'] = apply(df['locus.strand'], 1, function(x) if(x=="1"){x=="+"})
df['locus.strand']
getGRanges <- function(df){#
#
	df$locus.strand[df$locus.strand == "1"] <- "+"#
	df$locus.strand[df$locus.strand == "-1"] <- "-"#
#
	grange = GenomicRanges::makeGRangesFromDataFrame(df,start.field = "start", #
		end.field = "end", seqnames.field="omaid")#
#
	return(grange)#
}
getGRanges(mems$members)
df
df$omaid
class(df$omaid)
df$omaid[1]
object_list = list()#
#
	for(id in df$omaid){#
		object_list = c(object_list,getData('protein','id'))#
	}
object_list = list()#
#
	for(id in df$omaid){#
		object_list = c(object_list,getData('protein',id))#
	}
object_list = list()#
#
	for(id in df$omaid){#
		object_list[df$omaid] = getData('protein','id')#
	}
object_list = list()#
#
	for(id in df$omaid){#
		object_list[df$omaid] = getData('protein',id)#
	}
object_list = list()#
#
	for(id in df$omaid){#
		object_list[[df$omaid]] = getData('protein',id)#
	}
object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData('protein',id)#
	}
getObjectAttributes <- function (obj){#
	for(name in attributes(obj)$names){#
#
 		class_name = class(obj[[name]])#
#
 		if(class_name=="character" && startsWith(value[[name]],'https://')){#
 			class_name = "URL"#
#
 		}#
 		print(paste(name, ":", class_name))#
 	}#
}
g = getData("group","YEAST58")
getObjectAttributes(getData("group","YEAST58"))
getObjectAttributes <- function (obj){#
	for(name in attributes(obj)$names){#
#
 		class_name = class(obj[[name]])#
#
 		if(class_name=="character" && startsWith(obj[[name]],'https://')){#
 			class_name = "URL"#
#
 		}#
 		print(paste(name, ":", class_name))#
 	}#
}
getObjectAttributes(getData("group","YEAST58"))
getObjectAttributes <- function (obj){#
	for(name in attributes(obj)$names){#
#
 		class_name = class(obj[[name]])#
#
 		if(class_name=="character" && startsWith(obj[[name]],'https://')){#
 			class_name = "URL"#
#
 		}#
 		print(paste(name, ":", class_name))
}
getObjectAttributes <- function (obj){#
	for(name in attributes(obj)$names){#
#
 		class_name = class(obj[[name]])#
#
 		if(class_name=="character" && startsWith(obj[[name]],'https://')){#
 			class_name = "URL"#
#
 		}#
 		print(paste(name, ":", class_name))
}
getObjectAttributes <- function (obj){#
	for(name in attributes(obj)$names){#
#
 		class_name = class(obj[[name]])#
#
 		if(class_name=="character" && startsWith(obj[[name]],'https://')){#
 			class_name = "URL"#
#
 		}#
 		print(paste(name, ":", class_name))#
 	}#
}
getObjectAttributes(getData("group","YEAST58"))
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna"){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
getObjectAttributes(getData("group","YEAST58"))
df
object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData('protein',id)#
	}
getData('protein',id)
object_list = list()#
#
	for(id in df$entry_nr){#
		object_list[[id]] = getData('protein',id)#
	}
ddf
df
object_list = list()#
#
	for(url in df$entry_url){#
		object_list = resolveURL(url)#
	}
url = "https://omabrowser.org/api/protein/6511604/"
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
column_names
str(content_lsit)
str(content_list)
objectFactory(column_names,content_list)
list_of_variables = list()
for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna"){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}
column_names
for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
}
if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}
for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}#
}
for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
}
for(name in column_names){#
#
		content = content_list[[name]]#
#
if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
}
for(name in column_names){#
#
		content = content_list[[name]]#
#
if(name=="cdna"){#
 			content = Biostrings::DNAString(content)#
 		}#
}
content_list$cdna
for(name in column_names){#
#
		content = content_list[[name]]#
#
if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
}
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
object_list = list()#
#
	for(url in df$entry_url){#
		object_list = resolveURL(url)#
	}
object_list
object_list = list()#
#
	for(id in df$omaid){#
		object_list[id] = getData("protein",id)#
	}
object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData("protein",id)#
	}
object_list
getAnnotations <- function(df){#
#
	object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData("protein",id)#
	}#
#
	annotations = formatTopGO(object_list,format="geneID2GO")#
#
	return(annotations)#
#
}
getAnnotations(df)
getSequences <- function(df){#
#
	object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData("protein",id)#
	}#
#
	sequences = list()#
 	for(object in object_list){#
		sequences[[object$omaid]] = object$sequence#
	}#
	return(sequences)#
#
}
getSequences(df)
g = getData("genome","YEAST")
url = "https://omabrowser.org/api/genome/YEAST/"
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}
content = content_list[['chromosomes']]
content
if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}
content
content_list = content_list[['chromosomes']]
content_list
"entry_ranges" %in% names(content_list[[1]][[1]])
"entry_ranges" %in% names(content_list[[1]])
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 	if("entry_1" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 				#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
					data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])	 								 						#
	 			}#
	 	}#
#
	 	if("entry_ranges" %in% names(data[[1]])){#
	 		for(i in seq_along(info)){	 #
					info[[i]][[2]][[1]]=rbind(info[[i]][[2]][[1]])#
	 			}#
#
	 		data = info#
#
	 		}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
g = getData("genome","YEAST")
if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}
content
content_list
"entry_ranges" %in% names(content_list[[1]])
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 	if("entry_1" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 				#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
					data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])	 								 						#
	 			}#
	 	}#
#
	 	if("entry_ranges" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 #
					info[[i]][[2]][[1]]=rbind(info[[i]][[2]][[1]])#
	 			}#
#
	 		}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
formatData(content_list)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 	if("entry_1" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 				#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
					data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])	 								 						#
	 			}#
	 	}#
#
	 	if("entry_ranges" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 #
					data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
	 			}#
#
	 		}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
formatData(content_list)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 	if("entry_1" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 				#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
					data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])	 								 						#
	 			}#
	 	}#
#
	 	if("entry_ranges" %in% names(data[[1]])){#
	 		for(i in seq_along(data)){	 #
					data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
	 			}#
#
	 		}#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
g = getData("genome","YEAST")
content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
objectFactory(column_names,content_list)
content
content = content_list[['chromosomes']]
if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}
content
name = 'chromosomes'
if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(formatData(content_list[[name]]$chromosomes),#
 				start.field = "entry_ranges.1", end.field = "entry_ranges.2", seqnames.field="id", ignore.strand=TRUE)#
 		}
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(length(content)>1){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(content,#
 				start.field = "entry_ranges.1", #
 				end.field = "entry_ranges.2", seqnames.field="id", #
 				ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
objectFactory(column_names,content_list)
g = getData("genome","YEAST")
g
g = getData("genome","HUMAN")
g
g = getData("genome","ASHGO")
g
g['lineage']
getAttribute <- function (obj,attribute){#
	return(obj[attribute])#
}getAttribute <- function (obj,attribute){#
	return(obj[attribute])#
}
getAttribute <- function (obj,attribute){#
	return(obj[attribute])#
}
getAttribute(g,'chromosmes')
getAttribute(g,'chromosomes')
library(roma)#
#
hog <- getHOG(id="HUMAN22168")#
#
getObjectAttributes(hog)#
#
hog_id = getAttribute(hog,'hog_id')#
#
parent_hogs = getAttribute(hog,'parent_hogs')#
#
length(parent_hogs)#
#
getAttribute(parent_hogs[[1]],'hog_id')#
#
children_hogs = getAttribute(hog,'children_hogs')#
#
children_hog_id_1  = getAttribute(children_hogs[[1]],'hog_id')#
children_hog_id_1#
#
children_hog_id_2  = getAttribute(children_hogs[[2]],'hog_id')#
children_hog_id_2#
#
children_hog_1 = getHOG(id=children_hog_1)#
#
getAttribute(children_hog,"level")
children_hogs = getAttribute(hog,'children_hogs')
children_hogs
children_hogs[[1]]
children_hogs[[1,]]
children_hogs[[,1]]
children_hog_id_1  = children_hogs$hog_id[[1]]
children_hog_id_1
children_hogs$hog_id
hog
children_hogs = getAttribute(hog,'children_hogs')
children_hogs
members = getAttribute(getData("group","YEAST58"),'members')
members
getAttribute <- function (obj,attribute){#
	return(obj[[attribute]])#
}
members = getAttribute(getData("group","YEAST58"),'members')
members
children_hog_id_1  = children_hogs$hog_id[[1]]#
children_hog_id_1
hog <- getHOG(id="HUMAN22168")#
#
getObjectAttributes(hog)#
#
hog_id = getAttribute(hog,'hog_id')#
#
parent_hogs = getAttribute(hog,'parent_hogs')#
#
length(parent_hogs)#
#
getAttribute(parent_hogs[[1]],'hog_id')#
#
children_hogs = getAttribute(hog,'children_hogs')#
#
children_hog_id_1  = children_hogs$hog_id[[1]]#
children_hog_id_1
children_hog_id_2  = children_hogs$hog_id[[2]]#
children_hog_id_2#
#
children_hog_1 = getHOG(id=children_hog_1)#
#
getAttribute(children_hog,"level")
children_hog_1 = getHOG(id=children_hog_id_1)#
#
getAttribute(children_hog_1,"level")
hog <- getHOG(id="HUMAN22168")#
#
getObjectAttributes(hog)#
#
hog_id = getAttribute(hog,'hog_id')#
#
parent_hogs = getAttribute(hog,'parent_hogs')#
#
length(parent_hogs)#
#
getAttribute(parent_hogs[[1]],'hog_id')#
#
children_hogs = getAttribute(hog,'children_hogs')#
#
child_hog_id_1  = children_hogs$hog_id[[1]]#
child_hog_id_1#
#
child_hog_id_2  = children_hogs$hog_id[[2]]#
child_hog_id_2#
#
child_hog_1 = getHOG(id=child_hog_id_1)#
#
getAttribute(child_hog_1,"level")
child_hog_1_members = getHOG(id = child_hog_id_1, members=TRUE)#
child_hog_2_members = getHOG(id = child_hog_id_2, members=TRUE)
child_hog_2_members
getHOG <- function(id, level=NULL, members=FALSE){#
	if(class(members)!="logical"){#
		stop("Members parameter is of type boolean.")#
	}#
	if(missing(id)){#
		stop("You must provide a valid HOG ID.")#
	}#
	if(!is.null(level)){#
		if(members==FALSE){#
		url = urlGenerator(type="hog",id=id,query_param1="level",query_param1_value=level)#
		}#
		else{#
		url = urlGenerator(type="hog",id=id,detail="members",query_param1 ="level",query_param1_value=level)#
	}#
	}#
	else{#
		if(class(level)=="integer"){#
			stop("You must provide a valid identifier for a taxonomic level - it can only be idneitifed via its full capitalised name.")#
		}#
#
		if(members==FALSE){#
		url = urlGenerator(type="hog",id=id)#
		}#
		else{#
		url = urlGenerator(type="hog",id=id,detail="members")#
	}#
	}#
	return(requestFactory(url))#
}
child_hog_1_members = getHOG(id = child_hog_id_1, members=TRUE)#
child_hog_2_members = getHOG(id = child_hog_id_2, members=TRUE)
child_hog_2_members
depth(child_hog_2_members$members)
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(depth(content)>2){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(content,#
 				start.field = "entry_ranges.1", #
 				end.field = "entry_ranges.2", seqnames.field="id", #
 				ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
child_hog_1_members = getHOG(id = child_hog_id_1, members=TRUE)#
child_hog_2_members = getHOG(id = child_hog_id_2, members=TRUE)
child_hog_2_members
annotations_1 = getOntologies(child_hog_1_members)#
annotations_2 = getOntologies(child_hog_2_members)
getOntologies <- function(df){#
#
	object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData("protein",id)#
	}#
#
	annotations = formatTopGO(object_list,format="geneID2GO")#
#
	return(annotations)#
#
}
annotations_1 = getOntologies(child_hog_1_members)#
annotations_2 = getOntologies(child_hog_2_members)
annotations_2
annotations_1
annotations_1 = getOntologies(child_hog_1_members$members)#
annotations_2 = getOntologies(child_hog_2_members$members)
annotations_2
annotations_1
annotations = c(annotations_1,annotations_2)
annotaions
annotations
topGO = getTopGO(annotations, myInterestingGenes = names(annotaions_1), format = "geneID2GO")
topGO = getTopGO(annotations, myInterestingGenes = names(annotations_1), format = "geneID2GO")
library(topGP)
library(topG))
library(topGO)
library(topG))
topGO = getTopGO(annotations, myInterestingGenes = names(annotations_1), format = "geneID2GO")
df
object_list = vapply(df$omaid, getData("protein", x))
object_list = vapply(df$omaid, function (x) getData(type = "protein", x))
object_list = apply(df$omaid, function (x) getData(type = "protein", x))
object_list = apply(df$omaid, FUN = function (x) getData(type = "protein", x))
object_list = apply(df$omaid, MARGIN=1, FUN = function (x) getData(type = "protein", x))
object_list = lapply(df$omaid, MARGIN=1, FUN = function (x) getData(type = "protein", x))
object_list = lapply(df$omaid,FUN = function (x) getData(type = "protein", x))
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(depth(content)>2){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(content,#
 				start.field = "entry_ranges.1", #
 				end.field = "entry_ranges.2", seqnames.field="id", #
 				ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
object_list = lapply(df$omaid,FUN = function (x) getData(type = "protein", x))
object_list = vapply(df$omaid,FUN = function (x) getData(type = "protein", x))
class(df$omaid)
df$omaid
object_list = lapply(df$omaid,FUN = function (x) getData(type = "protein", id = x))
getData(type="protein",id="PICPG00513")
url = https://omabrowser.org/api/protein/PICPG00513/
getData(type="protein",id="PICPG00513
)
""
''
")
url = "https://omabrowser.org/api/protein/PICPG00513/#
"
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
content_list
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
url = trim(url)
url
url = "https://omabrowser.org/api/protein/PICPG00513/"
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
column_names
objectFactory(column_names,content_list)
library(roma)
geneList = list(getData(type="protein",id="YEAST58"),getData(type="protein",id="YEAST00059"))
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = as.list(protein_annotations)#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = protein['ontology'][[1]]['GO_term']#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = lappy(protein['ontology'][[1]]['GO_term'], FUN = function(x) x)#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
annotations = formatTopGO(geneList,format="geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = lapply(protein['ontology'][[1]]['GO_term'], FUN = function(x) x)#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
annotations
library(knitr)
library(rmarkdown)
library(devtools)
setwd("desktop")
build_vignettes("roma")
install('roma')
build_vignettes("roma")
build_vignettes("roma")
build_vignettes("roma")
install('roma')
build_vignettes("roma")
setwd("roma")
document()
roxygen2::roxygenise()
roxygen2::roxygenise()
build_vignettes("roma")
document()
update.packages("roxygen2")
update.packages("roxygen2")
document()
