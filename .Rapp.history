get_group <- function(group_id, close.groups) {#
	if(group_id=="all") {#
		url = url_generator(type="groups")#
	}#
	else {#
		url = url_generator(type="groups",id=group_id)#
		if(missing(close.groups)){#
			url = url_generator(type="groups",id=group_id,detail="close_groups")#
			}	#
		}#
	return(APIObject(url))	#
	}
group<-get_group("1")
group
get_group <- function(group_id, close.groups) {#
	if(group_id=="all") {#
		url = url_generator(type="groups")#
	}#
	else {#
		if(!missing(close.groups)){#
			url = url_generator(type="groups",id=group_id,detail="close_groups")#
			}#
		else{#
			url = url_generator(type="groups",id=group_id)#
		}	#
		}#
	return(APIObject(url))	#
	}
group
group<-get_group("1")
group
get_group <- function(group_id) {#
	if(group_id=="all") {#
		url = url_generator(type="groups")#
	}#
	else {#
		url = url_generator(type="groups",id=group_id)#
		}#
	return(APIObject(url))	#
	}
group<-get_group("1")
group
Error: could not find function "install
uninstall("omadb")
library(httr)#
library(plyr)#
library(jsonlite)#
#
api_url = "http://127.0.0.1:8000/api"#
#
check_response <- function(url){#
	resp=GET(url)#
	if (http_error(resp)) {#
    stop(#
      sprintf(#
        "OMA API request failed [%s]\n%s", #
        status_code(resp),#
        substring(fromJSON(content(resp, "text"))$detail,2) #due to utf-8 encoding#
      ),#
      call. = FALSE#
    )#
	}#
}#
#
url_generator <- function(type,id=NULL,detail=NULL,query_param1=NULL,query_param1_value=NULL,query_param2=NULL,query_param2_value=NULL){#
	url_prefix = paste0(api_url,"/",type,"/")#
	if(!is.null(id)){ id=paste0(id,"/")}#
	if(!is.null(detail)){ detail=paste0(detail,"/")}#
	if(!is.null(query_param1_value)){ query_param1=paste0("?",query_param1,"=",URLencode(query_param1_value))}#
	if(!is.null(query_param2_value)){ query_param2=paste0("&",query_param2,"=",URLencode(query_param2_value))}#
#
	final_url= paste0(url_prefix,id,detail,query_param1,query_param2)#
	check_response(final_url)#
	return(final_url)#
#
}#
#
get_all_pages <- function(url){#
	list_of_things <- list()#
	list_of_things[[1]] <- fromJSON(url)$results#
	count = fromJSON(url)$count#
	pages = count/100#
	if (pages%%1 != 0){#
		if(pages%%1 >= 0.5){#
		pages= round(pages)#
		}#
		else{#
			pages=round(pages+1,digits=0)#
		}#
	}#
	for(i in 2:pages){#
		new_url = paste0(url,"?page=",i)#
		list_of_things[[i]] <- fromJSON(new_url)$results#
	}#
	return(list_of_things)#
}#
#
depth <- function(list) ifelse(is.list(list), 1L + max(sapply(list, depth)), 0L)#
#
# Object constructor that accounts for most if not all formats data should come in#
#
APIObject <- function(url,pages=NULL) {#
 response = GET(url)#
 content_list = content(response, as = "parsed")#
 column_names = names(content_list)#
#
 list_of_variables <- list()#
 if("count" %in% column_names){#
 	list_of_variables[['message']] = "Access Denied." # things that would throttle the server like list of all the hogs or all the groups or all the genomes#
 	}#
 else{#
 	for(name in column_names){#
 	variable = content_list[[name]]#
 	if(class(variable)=="character" && startsWith(variable,"http")){#
 		var_response = GET(variable)#
 		var_content = content(var_response, as = "parsed") #names list#
 		if(depth(var_content)>2){ #
 			##checking for pagination. TO DO: parse all the pages#
 			if(names(var_content)[1]=="count"){#
 				if(!is.null(pages)){#
 					dfs <- get_all_pages(variable)#
					variable = rbind.fill(dfs)#
 				}#
 				else{#
 					variable=variable#
 				}#
 			}#
 			else{#
 				variable = APIObject(variable)	 #
 			}#
 		}#
 	else{#
 			dfs <- lapply(var_content, data.frame, stringsAsFactors = FALSE) #list of dataframes#
 			variable = rbind.fill(dfs)#
 		}		#
 	}#
#
 	if(class(variable)=="list"){#
 		if(depth(variable)>3){ #chromosomes#
 			for(i in 1:length(variable)){#
 				variable[[i]][[2]][[1]]=rbind(variable[[i]][[2]][[1]])		#
 			}#
 			dfs <- lapply(variable, data.frame, stringsAsFactors = FALSE)#
 			variable = rbind.fill(dfs)#
 		}#
 		else{#
 			dfs <- lapply(variable, data.frame, stringsAsFactors = FALSE)#
 			variable = rbind.fill(dfs)#
 		}	#
 	}#
 	list_of_variables[[name]] = variable#
 }#
 }#
#
 value <- list_of_variables#
 attr(value, "class") <- "apiobject"#
 value#
#
}
get_genome_alignment <- function(genome_id1,genome_id2,chr1,chr2){#
	if(missing(chr1) & missing(chr2)) {#
		#more complex url #
		url = paste0(api_url,"/pairs/",genome_id1,"/",genome_id2,"/")#
	}#
	else{#
		url = paste0(api_url,"/pairs/",genome_id1,"/",genome_id2,"/?chr1=",chr1,"&chr2=",chr2)#
	}#
	return(APIObject(url,pages="all"))#
}
get_genome_alignment("YEAST","ASHGO")
vp = get_genome_alignment("YEAST","ASHGO")
vp
get_genome_alignment <- function(genome_id1,genome_id2,chr1,chr2){#
	if(missing(chr1) & missing(chr2)) {#
		#more complex url #
		url = paste0(api_url,"/pairs/",genome_id1,"/",genome_id2,"/")#
	}#
	else{#
		url = paste0(api_url,"/pairs/",genome_id1,"/",genome_id2,"/?chr1=",chr1,"&chr2=",chr2)#
	}#
	return(APIObject(url))#
}
vp = get_genome_alignment("YEAST","ASHGO")
vp
vp = get_genome_alignment("YEAST","ASHGO")
head(vp)
url = http://127.0.0.1:8000/api/pairs/YEAST/ASHGO/
url="http://127.0.0.1:8000/api/pairs/YEAST/ASHGO/"
response=GET(ucl)
response=GET(url)
content_list = content(response, as = "parsed")
head(content_list)
depth(content_list)
content_list[[1]]
dfs <- lapply(var_content[[1]], data.frame, stringsAsFactors = FALSE)
dfs <- lapply(content_list[[1]], data.frame, stringsAsFactors = FALSE)
dfs
variable = rbind.fill(dfs)
variable
dfs
flatten(dfs)
depth(dfs[1])
flatten(dfs[1])
class(dfs[1])
dfs
lapply(dfs[1], data.frame, stringsAsFactors = FALSE)
lapply(dfs[[1]], data.frame, stringsAsFactors = FALSE)
variable
head(content_list)
content_list[[1]][[1]]
data.frame(content_list[[1]][[1]])
data.frame(content_list[[1]][[2]])
rbind(data.frame(content_list[[1]][[2]]),data.frame(content_list[[1]][[1]]))
head(vp)
vp[1]
vp[[1]]
dim(vp)
get_genome_alignment <- function(genome_id1,genome_id2,chr1,chr2){#
	if(missing(chr1) & missing(chr2)) {#
		#more complex url #
		url = paste0(api_url,"/pairs/",genome_id1,"/",genome_id2,"/")#
	}#
	else{#
		url = paste0(api_url,"/pairs/",genome_id1,"/",genome_id2,"/?chr1=",chr1,"&chr2=",chr2)#
	}#
	return(fromJSON(url))
}
vp = get_genome_alignment("YEAST","ASHGO")
vp
get_taxonomy <- function(root=NULL,members) {#
	if(missing(members)){#
		if(type=="newick"){#
			url = url_generator(type="taxonomy",id=root,query_param1="type",query_param1_value="newick")#
		}#
		else#
		{#
			url = url_generator(type="taxonomy",id=root)#
		}#
	}#
	else{#
		#induced taxonomy, members needs to be string of taxon ids separated by commas#
		if(is.null(type)){#
			url = url_generator(type="taxonomy",id=root,query_param1="members",query_param1_value=members)#
		}#
		else#
		{#
			url = url_generator(type="taxonomy",id=root,query_param1="members",query_param1_value=members,query_param2="type",query_param2_value="newick")			#
		}	#
	}#
	return(APIObject(url))#
}
tx = get_taxonomy()
get_taxonomy <- function(root=NULL,members) {#
	if(missing(members)){#
		url = url_generator(type="taxonomy",id=root,query_param1="type",query_param1_value="newick")#
	}#
	else{#
		url = url_generator(type="taxonomy",id=root,query_param1="members",query_param1_value=members,query_param2="type",query_param2_value="newick")				#
	}#
	return(APIObject(url))#
}
tx = get_taxonomy()
tx
tx = get_taxonomy()
tx
tx$root_taxon
get_group <- function(group_id) {#
	if(missing(group_id)){#
		stop("You must provide a group id.")#
	}#
	if(group_id=="all") {#
		url = url_generator(type="groups")#
	}#
	else {#
		url = url_generator(type="groups",id=group_id)#
		}#
	return(APIObject(url))	#
}
g=get_group()
packagesVersion("jsonlite")
packageVersion("jsonlite")
packageVersion("httr")
packageVersion("rjsonio")
library(omadb)
protein=get_protein("YEAST69")
protein=get_protein("YEAST90")
protein$sequence
?get_protein
library(biocLite)
library(bioclite)
biocLite("roma")
library("biocLite")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(roma)
biocLite("roma")
R CMD build omadb
install.packagesd("Biocheck")
install.packages("BioBheck")
library(httr)
library(plyr)
url
url = http://omadev.cs.ucl.ac.uk/api/pairs/YEAST/ASHGO/
url = "http://omadev.cs.ucl.ac.uk/api/pairs/YEAST/ASHGO/"
response = httr::GET(url)#
	content_list = httr::content(response, as = "parsed")#
	column_names = names(content_list)
dfs <- lapply(content_list, data.frame, stringsAsFactors = FALSE)
head(dfs)
final = rbind.fill(dfs)
head(final)
content_list
content_list[1]
dfs <- lapply(content_list, data.frame, stringsAsFactors = FALSE)
dfs[1]
depth(content_list)
depth <- function(list) ifelse(is.list(list), 1L + max(sapply(list, depth)), 0L)
depth(content_list)
dfe = dfs[[1]]
dfe[[1]]
lista = content_list[[1]]
lista
rbind(lista)
lista
lista[[1]]
lista[1]
depth(lista[1])
depth(lista[1][1])
lista[1][1]
lista[[1]][[1]
]
depth(lista[[1]][[1]])
depth(lista[[1]][[5]])
lista[[1]][[4]]
lista[[1]][[7]]
depth(lista[[1]][[7]])
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){#
	 			resolveNesting()#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}#
#
resolveNesting <- function (data) {#
	for(i in 1:length(data)){#
		for(j in 1:length(data[i])){#
			if(depth(data[i][j]==1)){#
				data[i][j]=plyr::rbind(data[i][j])#
			}#
		}		#
	}#
}
f = formatData(content_list)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){#
	 			resolveNesting(data)#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
f = formatData(content_list)
resolveNesting <- function (data) {#
	for(i in 1:length(data)){#
		for(j in 1:length(data[i])){#
			if(depth(data[[i]][[j]]==1)){#
				data[[i]][[j]]=plyr::rbind(data[[i]][[j]])#
			}#
		}		#
	}#
}
f = formatData(content_list)
resolveNesting <- function (data) {#
	for(i in 1:length(data)){#
		for(j in 1:length(data[i])){#
			if(depth(data[[i]][[j]])==1){#
				data[[i]][[j]]=plyr::rbind(data[[i]][[j]])#
			}#
		}		#
	}#
}
f = formatData(content_list)
head(df)
head(f)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #
	 			for(i in 1:length(data)){#
	 				resolveNesting(data)		#
	 			}#
	 		formatData(data)#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}#
#
 resolveNesting <- function (data) {#
 	for(i in 1:length(data)){#
 		for(j in 1:length(data[i])){#
 			for(k in 1:length(data[i][j])){#
 				if(depth(data[[i]][[j]][[k]])==1){#
 				data[[i]][[j]][[k]]=plyr::rbind(data[[i]][[j]][[k]])#
 			}#
 		}		#
 	}#
 	}#
}
f = formatData(content_list)
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #
	 			for(i in 1:length(data)){#
	 				resolveNesting(data)		#
	 			}#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}#
#
 resolveNesting <- function (data) {#
 	for(i in 1:length(data)){#
 		for(j in 1:length(data[i])){#
 			for(k in 1:length(data[i][j])){#
 				if(depth(data[[i]][[j]][[k]])==1){#
 				data[[i]][[j]][[k]]=plyr::rbind(data[[i]][[j]][[k]])#
 			}#
 		}		#
 	}#
 	}#
}
f = formatData(content_list)
head(f)
depth(lista[[1]][[7]])
lista[[1]][[7]]
rbind(lista[[1]][[7]])
lista[[1]][[7]]=rbind(lista[[1]][[7]])
lista[[1]][[7]]
length(lista)
length(lista[[1]][[7]])
formatData <- function (data) {#
	if(class(data)=="list" && length(data)!=0){#
	 		if(depth(data)>3){ #chromosomes#
	 			for(i in 1:length(data)){#
	 				#chromosomes#
	 				data[[i]][[2]][[1]]=rbind(data[[i]][[2]][[1]])#
#
	 				#genomealignment#
	 				data[[i]][[1]][[7]]=rbind(data[[i]][[1]][[7]])#
	 				data[[i]][[2]][[7]]=rbind(data[[i]][[2]][[7]])			#
	 			}#
	 		}#
#
	 		dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
	 		data = plyr::rbind.fill(dfs)#
	 		return(data)#
	}#
#
}
f = formatData(content_list)
head(f)
setwd("desktop")
devtools::install("roma")
library(roma)
geneList = list(getData(type="protein",id="YEAST58"),getData(type="protein",id="YEAST00059"))#
#' annotations = formatTopGO(geneList,format="geneID2GO")'
annotations
annotations = formatTopGO(geneList,format="geneID2GO")
setwd("roma")
library(devtools)
library(roxygen)
library(roxygen2)
document()
annotations
library(topGO)
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
setwd("..")
devtools::build_vignettes("roma")
library(roma)
hog <- getHOG(id="HUMAN22168")#
#
children = hog$children_hogs
proteins_list = list()#
#
for(child in children){#
	child_hog = resolveURL(child$levels_url)#
	members = resolveURL(child_hog$members_url)$members#
	for(member in members){#
		proteins_list = member$omaid#
	}#
}
proteins_list
proteins_list = list()#
#
for(child in children){#
	child_hog = resolveURL(child$levels_url)#
	members = resolveURL(child_hog$members_url)$members#
	for(member in members){#
		proteins_list[[member]] = member$omaid#
	}#
}
proteins_list = list()#
#
for(child in children){#
	child_hog = resolveURL(child$levels_url)#
	members = resolveURL(child_hog$members_url)$members#
	for(i in range(length(members))){#
		proteins_list[[i]] = members[[i]]$omaid#
	}#
}
proteins_list
devtools::build_vignettes("roma")
object_list = list()#
#
for(protein in proteins_list){#
	object_list[[protein]] = getData(type="protein",id=protein)#
}
object_list
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
}
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
}
object_list
length(object_list)
length(proteins_list)
proteins_list = list()#
#
for(child in children){#
	child_hog = resolveURL(child$levels_url)#
	members = resolveURL(child_hog$members_url)$members#
	for(i in range(length(members))){#
		proteins_list[[i]] = members[[i]]$omaid#
	}#
}
length(proteins_list)
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
}
length(object_list)
annotations = formatTopGO(object_list,format="geneID2GO")
objects_list
object_list
length(object_list)
str(object_list)
str(proteins_list)
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
}
str(object_list)
object_list[[1]] = getData(type="protein",id=proteins_list[[1]])
str(object_list)
annotations = formatTopGO(object_list,format="geneID2GO")
annotations
topGO = getTopGO(annotations, myInterestingGenes = list(proteins_list[[1]]), format = "geneID2GO")
library(roma)#
library(topGO)#
#
hog <- getHOG(id="HUMAN22168")#
#
children = hog$children_hogs#
#creating a list of omaid's for the protein members#
proteins_list = list()#
#
for(child in children){#
	child_hog = resolveURL(child$levels_url)#
	members = resolveURL(child_hog$members_url)$members#
	for(i in range(length(members))){#
		proteins_list[[i]] = members[[i]]$omaid#
	}#
}#
#
#let's check the go annotations for each#
#
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
}
object_list
devtools::build_vignettes("roma")
library(rmarkdown)
library(knitr)
devtools::build_vignettes("roma")
browseVignettes("roma")
devtools::install("roma")
browseVignettes("roma")
browseVignettes("roma")
browseVignettes("roma")
devtools::build_vignettes("roma")
devtools::build_vignettes("roma")
devtools::build_vignettes("roma/sequence_mapping.Rmd")
devtools::build_vignettes("roma./sequence_mapping.Rmd")
setwd("")
devtools::build_vignettes("roma/vignettes/sequence_mapping.Rmd")
devtools::build_vignettes("roma/vignettes/")
devtools::build_vignettes("roma/vignettes/")
devtools::build_vignettes("roma")
library(roma)#
library(topGO)#
#
hog <- getHOG(id="HUMAN22168")#
#
children = hog$children_hogs
proteins_list = list()#
#
for(child in children){#
	child_hog = resolveURL(child$levels_url)#
	members = resolveURL(child_hog$members_url)$members#
	for(i in range(length(members))){#
		proteins_list[[i]] = members[[i]]$omaid#
	}#
}
proteins_list
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
}
object_list
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
	i++#
}
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
	i+=i#
}
object_list = list()#
#
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
	i=i+1#
}
object_list
proteins_list
object_list = list()
for(i in range(length(proteins_list))){#
	object_list[[i]] = getData(type="protein",id=proteins_list[[i]])#
	i=i+1#
}
length(object_list)
str(object_list)
object_list[[1]] = getData(type="protein",id=proteins_list[[1]])
object_list[[1]]
browseVignettes("roma")
content_list
lista[[i]]<-"klara"
lista<-list()
lista[[i]]<-"klara"
lista[[ii]]<-"gab"
lista[["ii"]]<-"gab"
lista[[i]]<-"klara"
lista
"ii" in names(lista)
"ii" %in% names(lista)
setwd("./roma")
document()
document()
document()
document()
biocLite("BiocCheck")
source("https://bioconductor.org/biocLite.R")#
biocLite("BiocCheck")
library(BiocCheck)
