child_hog_1_members = getHOG(id = child_hog_id_1, members=TRUE)#
child_hog_2_members = getHOG(id = child_hog_id_2, members=TRUE)
child_hog_2_members
depth(child_hog_2_members$members)
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(depth(content)>2){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(content,#
 				start.field = "entry_ranges.1", #
 				end.field = "entry_ranges.2", seqnames.field="id", #
 				ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
child_hog_1_members = getHOG(id = child_hog_id_1, members=TRUE)#
child_hog_2_members = getHOG(id = child_hog_id_2, members=TRUE)
child_hog_2_members
annotations_1 = getOntologies(child_hog_1_members)#
annotations_2 = getOntologies(child_hog_2_members)
getOntologies <- function(df){#
#
	object_list = list()#
#
	for(id in df$omaid){#
		object_list[[id]] = getData("protein",id)#
	}#
#
	annotations = formatTopGO(object_list,format="geneID2GO")#
#
	return(annotations)#
#
}
annotations_1 = getOntologies(child_hog_1_members)#
annotations_2 = getOntologies(child_hog_2_members)
annotations_2
annotations_1
annotations_1 = getOntologies(child_hog_1_members$members)#
annotations_2 = getOntologies(child_hog_2_members$members)
annotations_2
annotations_1
annotations = c(annotations_1,annotations_2)
annotaions
annotations
topGO = getTopGO(annotations, myInterestingGenes = names(annotaions_1), format = "geneID2GO")
topGO = getTopGO(annotations, myInterestingGenes = names(annotations_1), format = "geneID2GO")
library(topGP)
library(topG))
library(topGO)
library(topG))
topGO = getTopGO(annotations, myInterestingGenes = names(annotations_1), format = "geneID2GO")
df
object_list = vapply(df$omaid, getData("protein", x))
object_list = vapply(df$omaid, function (x) getData(type = "protein", x))
object_list = apply(df$omaid, function (x) getData(type = "protein", x))
object_list = apply(df$omaid, FUN = function (x) getData(type = "protein", x))
object_list = apply(df$omaid, MARGIN=1, FUN = function (x) getData(type = "protein", x))
object_list = lapply(df$omaid, MARGIN=1, FUN = function (x) getData(type = "protein", x))
object_list = lapply(df$omaid,FUN = function (x) getData(type = "protein", x))
objectFactory <- function(column_names,content_list) { #
#
	list_of_variables = list()#
	for(name in column_names){#
#
		content = content_list[[name]]#
#
 		if(class(content)=="list"){#
 			if(is.null(names(content))){#
 				if(depth(content)>2){#
 					content = formatData(content)#
 				}				#
 			}#
 		}#
#
 		if(name=="chromosomes"){#
 			content = GenomicRanges::makeGRangesFromDataFrame(content,#
 				start.field = "entry_ranges.1", #
 				end.field = "entry_ranges.2", seqnames.field="id", #
 				ignore.strand=TRUE)#
 		}#
#
 		if(name == "locus"){#
 		 	content = GenomicRanges::GRanges(#
 		 		seqnames = content_list[['omaid']],#
 		 		ranges = IRanges::IRanges(content$start,content$end),#
 		 		strand = content$strand)#
 		}#
#
 		if(name=="sequence"){#
 			content = Biostrings::AAString(content)#
 		}#
#
 		if(name=="cdna" && !(grepl("X",content))){#
 			content = Biostrings::DNAString(content)#
 		}#
#
 		list_of_variables[[name]] = content#
 	}#
#
 	value <- list_of_variables#
 	return(value)#
#
}
object_list = lapply(df$omaid,FUN = function (x) getData(type = "protein", x))
object_list = vapply(df$omaid,FUN = function (x) getData(type = "protein", x))
class(df$omaid)
df$omaid
object_list = lapply(df$omaid,FUN = function (x) getData(type = "protein", id = x))
getData(type="protein",id="PICPG00513")
url = https://omabrowser.org/api/protein/PICPG00513/
getData(type="protein",id="PICPG00513
)
""
''
")
url = "https://omabrowser.org/api/protein/PICPG00513/#
"
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
content_list
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
url = trim(url)
url
url = "https://omabrowser.org/api/protein/PICPG00513/"
response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
column_names
objectFactory(column_names,content_list)
library(roma)
geneList = list(getData(type="protein",id="YEAST58"),getData(type="protein",id="YEAST00059"))
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = as.list(protein_annotations)#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = protein['ontology'][[1]]['GO_term']#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
annotations
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = lappy(protein['ontology'][[1]]['GO_term'], FUN = function(x) x)#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
annotations = formatTopGO(geneList,format="geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = lapply(protein['ontology'][[1]]['GO_term'], FUN = function(x) x)#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
	geneID2GO = list()#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
	    protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	if(missing(geneList)|| class(geneList)!="list"){#
		stop("You must provide a valid list of genes.")#
	}#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
formatTopGO <- function(geneList,format){#
#
	geneID2GO = list()#
#
	for(protein in geneList){#
		if(startsWith(protein['ontology'][[1]],"https://")){#
			protein['ontology'][[1]] = resolveURL(protein['ontology'][[1]])#
		}#
#
		protein_annotations = {}#
#
		for (GO_term in protein['ontology'][[1]]['GO_term']){#
			protein_annotations <- GO_term #
		}#
#
		geneID2GO[[protein$omaid]] = protein_annotations#
	}#
#
	if(format=="geneID2GO"){#
			return(geneID2GO)#
			}#
	if(format=="GO2geneID"){#
			return(topGO::inverseList(geneID2GO))#
			}#
	else{#
		stop("Invalid format. Must be either 'GO2geneID' or 'geneID2GO'")#
	}#
#
}
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations=annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
annotations
ip <- as.data.frame(installed.packages()[,c(1,3:4)])#
rownames(ip) <- NULL#
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]#
print(ip, row.names=FALSE)
remove.packages("roxygen2")
devtools::install_github("klutometis/roxygen")
setwd("desktop/roma")
library(roxygen2)
library(rmarkdown)
document()
library(devtools)
document()
setwd("..")
devtools::install("roma")
?roma
library(roma)
?getOntologies
setwd("./roma")
document()
?roma
document()
?roma
document()
?roma
document()
?roma
document()
?roma
document()
?roma
document()
?roma
document()
?roma
library(roma)
?roma
document()
?roma
browseVignettes("roma")
build_vignettes('roma')
build_vignettes(roma)
build_vignettes("roma")
setwd("..")
build_vignettes("roma")
protein <- getData(type="protein",id="YEAST58")
getObjectAttributes(protein)
orthologs = getAttribute(protein,'orthologs')
orthologs
orthologs = resolveURL(orthologs)
orthologs
gRanges = getGRanges(orthologs)
gRanges
sequences = getSequences(orthologs)
sequences
ontologies = getOntologies(orthologs)
devtools::install("roma")
library(roma)
protein <- getData(type="protein",id="YEAST58")#
#
getObjectAttributes(protein)#
#
orthologs = getAttribute(protein,'orthologs')#
#
orthologs = resolveURL(orthologs)
ontologies = getOntologies(orthologs)
devtools::install("roma")
protein <- getData(type="protein",id="YEAST58")#
#
getObjectAttributes(protein)#
#
orthologs = getAttribute(protein,'orthologs')#
#
orthologs = resolveURL(orthologs)
library(roma)
protein <- getData(type="protein",id="YEAST58")#
#
getObjectAttributes(protein)#
#
orthologs = getAttribute(protein,'orthologs')#
#
orthologs = resolveURL(orthologs)
ontologies = getOntologies(orthologs)
devtools::install("roma")
library(roma)
protein <- getData(type="protein",id="YEAST58")#
#
getObjectAttributes(protein)#
#
orthologs = getAttribute(protein,'orthologs')#
#
orthologs = resolveURL(orthologs)
ontologies = getOntologies(orthologs)
resolveURL(" https://omabrowser.org/api/protein/8751741/ontology/")
url = "https://omabrowser.org/api/protein/8751741/ontology/"
response = httr::GET(url)
content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)
content_list
annotations = formatTopGO(geneList = list(getData(type="protein",id="YEAST58"),getData(type="protein",id="YEAST00059")),format="geneID2GO")
getTopGO(annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
annotations
annotations$dummie = ""
annotations
getTopGO(annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
content_list
content = content_list[['name']]
content
url
annotation = resolveURL(protein[['ontology']])
annotation = resolveURL(url)
simpleRequest <- function (url){#
	out <- tryCatch(#
	{		#
		response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)#
#
		objectFactory(column_names,content_list)#
	}, #
	error = function(cond) {#
            message(paste("THE OMA REST API request failed:", url))#
            message("Here's the original error message:")#
			response_message = httr::http_status(response)$message#
            message(response_message)#
            return(NA)#
        },#
#
    warning = function(cond) {#
            message(paste("URL caused a warning:", url))#
            message("Here's the original warning message:")#
            response_message = httr::http_status(response)$message#
#
            message(response_message)#
            return(NULL)#
        }#
   	)#
#
	return(out)#
}#
objectFactory <- function(column_names, content_list) {#
    list_of_variables = lapply(column_names, FUN = function(name) {#
#
        content = content_list[[name]]#
#
        if(is.null(content)){#
            content#
        }#
        else{#
            if (class(content) == "list" && length(content)!=0) {#
                if (is.null(names(content))) {#
                      formatData(content)#
                }#
            }#
#
            else if (name == "chromosomes") {#
                GenomicRanges::makeGRangesFromDataFrame(content, #
                    start.field = "entry_ranges.1", end.field = "entry_ranges.2", #
                    seqnames.field = "id", ignore.strand = TRUE)#
            }#
            else if (name == "locus") {#
                GenomicRanges::GRanges(seqnames = content_list[["omaid"]], #
                    ranges = IRanges::IRanges(content$start, content$end), #
                    strand = content$strand)#
            }#
            else if (name == "sequence") {#
                Biostrings::AAString(content)#
            }#
            else if (name == "cdna" && !(grepl("X", content))) {#
                Biostrings::DNAString(content)#
            }#
            else{#
                content#
            }#
        }#
        })#
    names(list_of_variables) = column_names#
    value <- list_of_variables#
    return(value)#
}#
#
requestFactory <- function (url) {#
	out<- tryCatch(#
	{	#
		response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)#
#
		if(is.null(column_names)){#
			if(length(content_list)==1){#
				column_names = names(content_list[[1]])#
#
				objectFactory(column_names, content_list = content_list[[1]])#
				}#
			else{#
#
				formatData(content_list)#
			}#
		}#
#
		else {#
#
			objectFactory(column_names,content_list)#
		}#
	},#
		error= function(cond) {#
            message(paste("THE OMA REST API request failed: the endpoint does not exist:", url))#
            message("Here's the original error message:")#
			response_message = httr::http_status(response)$message#
            message(response_message)#
            return(NA)#
        },#
#
    	warning=function(cond) {#
            message(paste("URL caused a warning:", url))#
            message("Here's the original warning message:")#
            response_message = httr::http_status(response)$message#
#
            message(response_message)#
            return(NULL)#
        }	#
#
		)#
	return(out)#
}#
#
formatData <- function(data) {#
#
        if ("entry_1" %in% names(data[[1]])) {#
            for (i in seq_along(data)) {#
                data[[i]][[1]][[7]] = rbind(data[[i]][[1]][[7]])#
                data[[i]][[2]][[7]] = rbind(data[[i]][[2]][[7]])#
            }#
        }#
#
        if("alternative_levels" %in% names(data[[1]])){#
            for (i in seq_along(data)) {#
                data[[i]][['alternative_levels']] = NULL#
            }        #
        }#
        if ("entry_ranges" %in% names(data[[1]])) {#
            for (i in seq_along(data)) {#
                data[[i]][[2]][[1]] = rbind(data[[i]][[2]][[1]])#
            }#
        }#
        dfs <- lapply(data, data.frame, stringsAsFactors = FALSE)#
        data = plyr::rbind.fill(dfs)#
        return(data)#
}
annotation = resolveURL(url)
objectFactory(column_names, content_list = content_list[[1]])
list_of_variables = lapply(column_names, FUN = function(name) {#
#
        content = content_list[[name]]#
#
        if(is.null(content)){#
            content#
        }#
        else{#
            if (class(content) == "list" && length(content)!=0) {#
                if (is.null(names(content))) {#
                      formatData(content)#
                }#
            }#
#
            else if (name == "chromosomes") {#
                GenomicRanges::makeGRangesFromDataFrame(content, #
                    start.field = "entry_ranges.1", end.field = "entry_ranges.2", #
                    seqnames.field = "id", ignore.strand = TRUE)#
            }#
            else if (name == "locus") {#
                GenomicRanges::GRanges(seqnames = content_list[["omaid"]], #
                    ranges = IRanges::IRanges(content$start, content$end), #
                    strand = content$strand)#
            }#
            else if (name == "sequence") {#
                Biostrings::AAString(content)#
            }#
            else if (name == "cdna" && !(grepl("X", content))) {#
                Biostrings::DNAString(content)#
            }#
            else{#
                content#
            }#
        }
})
list_of_variables
names(list_of_variables) = column_names
value <- list_of_variables
return(value)
objectFactory <- function(column_names, content_list) {#
    list_of_variables = lapply(column_names, FUN = function(name) {#
#
        content = content_list[[name]]#
#
        if(is.null(content)){#
            return(" ")#
        }#
        else{#
            if (class(content) == "list" && length(content)!=0) {#
                if (is.null(names(content))) {#
                      formatData(content)#
                }#
            }#
#
            else if (name == "chromosomes") {#
                GenomicRanges::makeGRangesFromDataFrame(content, #
                    start.field = "entry_ranges.1", end.field = "entry_ranges.2", #
                    seqnames.field = "id", ignore.strand = TRUE)#
            }#
            else if (name == "locus") {#
                GenomicRanges::GRanges(seqnames = content_list[["omaid"]], #
                    ranges = IRanges::IRanges(content$start, content$end), #
                    strand = content$strand)#
            }#
            else if (name == "sequence") {#
                Biostrings::AAString(content)#
            }#
            else if (name == "cdna" && !(grepl("X", content))) {#
                Biostrings::DNAString(content)#
            }#
            else{#
                content#
            }#
        }#
        })#
    names(list_of_variables) = column_names#
    value <- list_of_variables#
    return(value)#
}
annotation = resolveURL(url)
response = httr::GET(url)
content_list = httr::content(response, as = "parsed")
content_list
column_names = names(content_list)
formatData(content_list)
requestFactory <- function (url) {#
	out<- tryCatch(#
	{	#
		response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)#
#
		if(is.null(column_names)){#
			 if(length(content_list)==1){#
				column_names = names(content_list[[1]])#
#
				objectFactory(column_names, content_list = content_list[[1]])#
				}#
		      else{#
                    if(!is.null(content_list)){#
                       formatData(content_list) #
                    }#
                    else{#
                        return(" ")#
                    }#
			}#
		}#
#
		else {#
#
			objectFactory(column_names,content_list)#
		}#
	},#
		error= function(cond) {#
            message(paste("THE OMA REST API request failed: the endpoint does not exist:", url))#
            message("Here's the original error message:")#
			response_message = httr::http_status(response)$message#
            message(response_message)#
            return(NA)#
        },#
#
    	warning=function(cond) {#
            message(paste("URL caused a warning:", url))#
            message("Here's the original warning message:")#
            response_message = httr::http_status(response)$message#
#
            message(response_message)#
            return(NULL)#
        }	#
#
		)#
	return(out)#
}
annotation = resolveURL(url)
resolveURL <- function (url_field) {#
	return(requestFactory(url_field))#
}
annotation = resolveURL(url)
if(is.null(column_names)){#
			 if(length(content_list)==1){#
				column_names = names(content_list[[1]])#
#
				objectFactory(column_names, content_list = content_list[[1]])#
				}#
		      else{#
                    if(!is.null(content_list)){#
                       formatData(content_list) #
                    }#
                    else{#
                        return(" ")#
                    }#
			}#
		}
is.null(content_list)
content_list
length(content_list)
requestFactory <- function (url) {#
#
	out<- tryCatch(#
	{	#
		response = httr::GET(url)#
#
		content_list = httr::content(response, as = "parsed")#
		column_names = names(content_list)#
#
		if(is.null(column_names)){#
			 if(length(content_list)==1){#
				column_names = names(content_list[[1]])#
#
				objectFactory(column_names, content_list = content_list[[1]])#
				}#
		      else{#
                    if(length(content_list)!=0){#
                       formatData(content_list) #
                    }#
                    else{#
                        return(" ")#
                    }#
			}#
		}#
#
		else {#
#
			objectFactory(column_names,content_list)#
		}#
	},#
		error= function(cond) {#
            message(paste("THE OMA REST API request failed: the endpoint does not exist:", url))#
            message("Here's the original error message:")#
			response_message = httr::http_status(response)$message#
            message(response_message)#
            return(NA)#
        },#
#
    	warning=function(cond) {#
            message(paste("URL caused a warning:", url))#
            message("Here's the original warning message:")#
            response_message = httr::http_status(response)$message#
#
            message(response_message)#
            return(NULL)#
        }	#
#
		)#
	return(out)#
}
annotation = resolveURL(url)
annotaion
annotation
devtools::install("roma")
devtools::build_vignettes("roma")
protein <- getData(type="protein",id="YEAST58")#
#
getObjectAttributes(protein)#
#
orthologs = getAttribute(protein,'orthologs')#
#
orthologs = resolveURL(orthologs)#
#
head(orthologs)
ontologies = getOntologies(orthologs)
devtools::install("roma")
devtools::build_vignettes("roma")
devtools::install("roma")
devtools::build_vignettes("roma")
devtools::install("roma")
devtools::build_vignettes("roma")
devtools::install("roma")
devtools::build_vignettes("roma")
browseVignettes("roma")
devtools::install("roma")
devtools::build_vignettes("roma")
browseVignettes("roma")
devtools::build_vignettes("roma")
browseVignettes("roma")
browseVignettes("roma")
devtools::install("roma")
devtools::build_vignettes("roma")
browseVignettes("roma")
options()
roma::option()
roma::options()
?roma
?roma
setwd('./roma')
setwd("./roma")
document()
?roma
document()
?roma
document()
?roma
document()
document()
?roma
document()
?getTopGO
document()
geneList = list(getData(type="protein",id="YEAST58"),getData(type="protein",id="YEAST00059"))#
annotations = formatTopGO(geneList,format="geneID2GO")
getTopGO(annotations, myInterestingGenes = list("YEAST00058"), format = "geneID2GO")
document()
source("https://bioconductor.org/biocLite.R")
biocLite()
document()
document()
